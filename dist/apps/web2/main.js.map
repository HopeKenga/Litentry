{"version":3,"file":"main.js","mappings":"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","sources":["webpack://interview/./apps/web2/src/app/app.controller.ts","webpack://interview/./apps/web2/src/app/app.module.ts","webpack://interview/./apps/web2/src/app/app.service.ts","webpack://interview/./libs/auth/src/index.ts","webpack://interview/./libs/auth/src/jwt.strategy.ts","webpack://interview/./libs/auth/src/lib/auth.controller.ts","webpack://interview/./libs/auth/src/lib/auth.module.ts","webpack://interview/./libs/auth/src/lib/auth.service.ts","webpack://interview/./libs/auth/src/lib/constants.ts","webpack://interview/./libs/auth/src/lib/jwt-auth.guard.ts","webpack://interview/./libs/auth/src/lib/local-auth.guard.ts","webpack://interview/./libs/auth/src/local.strategy.ts","webpack://interview/./libs/user/src/dto/register.dto.ts","webpack://interview/./libs/user/src/index.ts","webpack://interview/./libs/user/src/lib/user.controller.ts","webpack://interview/./libs/user/src/lib/user.module.ts","webpack://interview/./libs/user/src/lib/user.service.ts","webpack://interview/external commonjs \"@nestjs/common\"","webpack://interview/external commonjs \"@nestjs/config\"","webpack://interview/external commonjs \"@nestjs/core\"","webpack://interview/external commonjs \"@nestjs/jwt\"","webpack://interview/external commonjs \"@nestjs/passport\"","webpack://interview/external commonjs \"@prisma/client\"","webpack://interview/external commonjs \"bcrypt\"","webpack://interview/external commonjs \"class-validator\"","webpack://interview/external commonjs \"express\"","webpack://interview/external commonjs \"passport-jwt\"","webpack://interview/external commonjs \"passport-local\"","webpack://interview/external commonjs \"tslib\"","webpack://interview/webpack/bootstrap","webpack://interview/./apps/web2/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n","import { AuthModule } from '@interview/auth';\nimport { UserModule } from '@interview/user';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      cache: true,\n      envFilePath: ['.env.local', '.env'],\n    }),\n    AuthModule,\n    UserModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n//when building using nx, everything is a library. NX is able to support a laarge number of frameworks.\n//Like building with lego pieces. Same lego in vue is the same in react or angular. All lego pieces can be used independently and together.\n//when using a redux state manager, there's no need to rewrite actions and the reducer. There's a lot of reusability especially on cross platform development.\n//We have one repo which is easily manageable. It allows us to have everything including shared functions in one repo.\n//when building an app, picture it as a lego, not building from the ground up .\n// Using a monorepo allows you to stack it up with libraries.\n//when installing nestjs, it comes the architecture of our application\n//the app is the core of our application. Nx allows scabiility to be a non-issue.A library is not bound to one part\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to web2!' };\n  }\n}\n","export * from './lib/auth.controller';\nexport * from './lib/auth.service';\nexport * from './lib/auth.module';\n","import { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { jwtConstants } from './lib/constants';\n\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.secret\n        })\n    }\n\n    async validate(payload: any) {\n        return {userId: payload.sub, username: payload.username}\n    }\n}\n//validation . \n//extending the passport strategy.","import { Controller } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n}\n","import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from '../jwt.strategy';\nimport { LocalStrategy } from '../local.strategy';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport { JwtAuthGuard } from './jwt-auth.guard';\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '6000s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy, LocalAuthGuard, JwtAuthGuard],\n  exports: [AuthService, LocalStrategy, JwtStrategy, LocalAuthGuard, JwtAuthGuard],\n})\nexport class AuthModule {}\n","import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Prisma, PrismaClient, User } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\n\nconst prisma = new PrismaClient();\n@Injectable()\nexport class AuthService {\n    constructor(\n        private jwtTokenService: JwtService,\n    ) {}\n    async loginWithCredentials(user: User): Promise<string> {\n        const payload = { username: user.username, sub: user.id };\n        const accessToken = this.jwtTokenService.sign(payload);\n        return accessToken;\n    } \n\n    public async validateUserCredentials(username: string, password: string): Promise<User> {\n        const user = await prisma.user.findUnique({\n            where: {\n                username: username,\n            }\n        });\n        if (user && await bcrypt.compare(password, user.password)) {\n            const {...result } = user;\n            return result;\n        }\n    }\n}\n","export const jwtConstants = {\n    secret: process.env.JWT_SECRET || 'secretKey',\n}","import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {} \n//guards for authentication.","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}","import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Strategy } from \"passport-local\";\nimport { AuthService } from \"./lib/auth.service\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        private authService: AuthService,\n    ) {\n        super({\n            usernameField: \"username\",\n        });\n    }\n\n    async validate(username: string, password: string): Promise<any> {\n        const user = await this.authService.validateUserCredentials(username, password);\n        console.log('user', user);\n\n        if (!user) {\n            throw new UnauthorizedException('Invalid credentials, user not found');\n        }\n\n        return user;\n    }\n}\n//local strategy is used for login\n//jwt is for all other authentications(session based authentication through provision of an accessToken)","import { IsNotEmpty, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class RegisterDTO {\n    @IsNotEmpty()\n    @MaxLength(100)\n    username: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(6)\n    password: string;\n\n    //validate alphanumeric, min 8 characters, max 20 characters, unique, required, no spaces, no symbols\n    \n}\n\n","export * from './lib/user.controller';\nexport * from './lib/user.service';\nexport * from './lib/user.module';\n","import { Body, Controller, Get, Post, HttpStatus, UseGuards, Res, UnauthorizedException } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Prisma } from '@prisma/client';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { UserService } from './user.service';\nimport { AuthService } from '@interview/auth';\nimport { RegisterDTO } from '../dto/register.dto';\n\n@Controller('v1')// allows grouping of endpoints\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n  ) {}\n\n\n  async validate(username: string, password: string): Promise<any> {\n    const user = await this.authService.validateUserCredentials(username, password);\n    console.log('user', user);\n\n    if (!user) {\n        throw new UnauthorizedException('Invalid credentials, user not found');\n    }\n\n    return user;\n}\n  \n  @Post('signin')\n  async createUser(@Body() params: RegisterDTO, @Res() res: Response) {\n    const { username, password } = params;\n    // Validate if user already exists\n    const isUserU = await this.userService.findOneByUsername(username);\n    // if (isUserU) return res.status(HttpStatus.CONFLICT).json({'message': 'User already exists'});\n    if (isUserU) {\n      const user = await this.authService.validateUserCredentials(username, password);\n      if (!user) {\n        throw new UnauthorizedException('Invalid credentials, user not found');\n      }\n        const token = await this.authService.loginWithCredentials(user);\n        return res.status(HttpStatus.OK).json({\n          message: 'Login successful',\n          access_token: token,\n          user: user\n        });// Task 1- if a username exists validate and return a token. If a username is not found create a new one\n    }// destructuring parameters\n\n    // Validate user inputs\n    const validation = this.userService.validateUserInputs(params, res);\n    if(validation === true) {\n      const user = await this.userService.create(params);\n      if(!user) return res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({'message': 'User could not be created'});\n      return res.status(HttpStatus.OK).json({'message': 'User created successfully'});\n    }\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('secret')\n  async getAllUsers() {\n    return await this.userService.randomSecret();\n  }\n}\n// Endpoints. ","import { AuthModule } from '@interview/auth';\nimport { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    AuthModule\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n","import { HttpStatus, Injectable } from '@nestjs/common';\nimport { Prisma, PrismaClient, User } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport { Response } from 'express';\nimport { RegisterDTO } from '../dto/register.dto';\n\nconst prisma = new PrismaClient();\n\n@Injectable()\nexport class UserService {\n    public async create(params: Prisma.UserCreateInput): Promise<User> {\n        const { password } = params;       \n        \n        const hashedPassword = await bcrypt.hash(password, 10);\n        const user = await prisma.user.create({\n            data: { ...params, password: hashedPassword }\n        });\n        return user;\n    }\n\n    public async findOneByUsername(username: string): Promise<User|null> {\n        return prisma.user.findFirst({\n            where: {\n                username,\n            }\n        });\n    }  \n\n    public async randomSecret() {\n        const secrets = await prisma.secret.findMany({});\n        const randomSecret = secrets[Math.floor(Math.random() * secrets.length)];\n        return randomSecret;\n    }\n    \n    public validateUserInputs(params: RegisterDTO, res: Response) {\n        const { username, password } = params;\n        //check if password has a min length of 6 characters\n        if (password.length < 6) {\n            // throw new Error('Password must be at least 6 characters');\n            return res.status(HttpStatus.BAD_REQUEST).json({'statusCode': HttpStatus.BAD_REQUEST,'message': 'Password must be at least 6 characters'});\n        }\n        //check if username is a string\n        if (typeof username !== 'string') {\n            // throw new Error('Username must be a string');\n            return res.status(HttpStatus.BAD_REQUEST).json({'statusCode': HttpStatus.BAD_REQUEST,'message': 'Username must be a string'});\n        }\n        //check if username has symbols\n        if (username.match(/[^a-zA-Z0-9]/)) {\n            // throw new Error('Username must be alphanumeric');\n            return res.status(HttpStatus.BAD_REQUEST).json({'statusCode': HttpStatus.BAD_REQUEST,'message': 'Username must be alphanumeric'});\n        }\n        //check if username has a max length of 100 characters\n        if (username.length > 100) {\n            // throw new Error('Username must be at most 100 characters');\n            return res.status(HttpStatus.BAD_REQUEST).json({'statusCode': HttpStatus.BAD_REQUEST,'message': 'Username must be at most 100 characters'});\n        }\n        //check if username has spaces\n        if (username.match(/\\s/)) {\n            // throw new Error('Username must not contain spaces');\n            return res.status(HttpStatus.BAD_REQUEST).json({'statusCode': HttpStatus.BAD_REQUEST,'message': 'Username must not contain spaces'});\n        }\n        return true;\n    }\n}\n\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"bcrypt\");","module.exports = require(\"class-validator\");","module.exports = require(\"express\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n//functions reside in the libs folder\n"],"names":[],"sourceRoot":""}